*Number Theory Project 01*

** Password Strength Security

#+BEGIN_SRC elisp :results output
(defun psswrd_chckr()
   "Simple way to check the strength of a password

   We are going to control how many possible combinations there are
   with some state variables. Basically, if a character in the password
   is contained in one of these sets, we flip a bit to tell us so. I would
   do one for the symbols but that seems like too much work. Let's assume
   that there are 32 on a standard keyboard (Don't worry, I counted on mine)."
   
   ; Password to check, at the top for your convenience
   ; Keep it around 10 characters, please (it's not set up for long passwords)
   (setq psswrd "")   

   ; Sets to compare to
   (setq lowercase '(97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122))
   (setq uppercase '(65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90))
   (setq numbers '(48 49 50 51 52 53 54 55 56 57))
   (setq symbols '(32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 58 59 60 61 62 63 64 91 92 93 94 95 96 123 124 125 126))

   ; Status container
   (setq LOWERCASE 0)
   (setq UPPERCASE 0)
   (setq NUMBERS 0)
   (setq SYMBOLS 0)
   
   ; Variables needed for the math operations
   (setq attacks_per_second (* 1.7 0.000001))
   (setq num_combinations 0)
   
   ; The value we are really concerned with!
   (setq strength 0)
   
   ; Find the length of the password string
   (setq psswrd_length (length (symbol-value 'psswrd)))
   
   ; Iterate through the string
   (setq count 0)
   (while (< count psswrd_length)
      (if (member (elt psswrd count) lowercase) ; if the current element is lowercase, set this variable "High"
         (setq LOWERCASE 1)
      )
      (if (member (elt psswrd count) uppercase)
         (setq UPPERCASE 1)
      )
      (if (member (elt psswrd count) numbers) ; we can use the member operator because the symbols and numbers are
         (setq NUMBERS 1)                     ;    represented by their ascii values
      )
      (if (member (elt psswrd count) symbols)
         (setq SYMBOLS 1)
      )
      (setq count (1+ count)))

   ; Set number of combinations
   (if (equal LOWERCASE 1)
      (setq num_combinations (+ num_combinations 26)))
   (if (equal UPPERCASE 1)
      (setq num_combinations (+ num_combinations 26)))
   (if (equal NUMBERS 1)
      (setq num_combinations (+ num_combinations 10)))
   (if (equal SYMBOLS 1)
      (setq num_combinations (+ num_combinations 33)))

   ; Calculate the strength
   (cond ((and (< 00 num_combinations) (< num_combinations 27)) (setq strength 1))
         ((and (< 27 num_combinations) (< num_combinations 53)) (setq strength 2))
         ((and (< 53 num_combinations) (< num_combinations 63)) (setq strength 3))
         ((and (< 63 num_combinations) (< num_combinations 96)) (setq strength 4))
   )
   ; Output the strength
   (print "On a scale of one to four, your password strength is:")
   (print strength)
)
(psswrd_chckr)
#+END_SRC
** Caesar Cipher

#+BEGIN_SRC elisp :results output
(defun caesar_cipher()
   "An elisp implementation of a Caesar cipher"
   
   ; The plain text and key up front and personal
   (setq plaintext "helloz")
   (setq key ?b)

   ; Find the length of the password
   (setq msg_length (length (symbol-value 'plaintext)))

   ; Make the password and key lowercase
   (setq plaintext (downcase plaintext))

   ; Find the actual amount to shift the plaintext from the key
   (setq key_number (% key 96))

   ; Encrypt!
   ;    -Loop through the entire password
   ;    -add the key to each letter in the password  
   (setq count 0)
   (setq ciphertext '())
   (while (< count msg_length)
      (setq ciphertext (cons (% (+ key_number (elt plaintext count)) 122) ciphertext))
      (setq count (1+ count))
   )

   ; As the code stands now, if we get any wrap around, our values will be less than 97,
   ;   so we'll be losing our ascii values. This loop is meant to fix that
   (setq count2 0)
   (setq cipher_with_loop '())
   (while (< count2 (length (symbol-value 'ciphertext)))
      (if (< (elt ciphertext count2) 97)
         (setq cipher_with_loop (cons (+ 96 (elt ciphertext count2)) cipher_with_loop))
       (setq cipher_with_loop (cons (elt ciphertext count2) cipher_with_loop))
      )
      (setq count2 (1+ count2))
   )

   ; Print out the encrypted ciphertext
   (setq count3 0)
   (setq encrpyted_text '())
   (while (< count3 (length (symbol-value 'cipher_with_loop)))
      (print (char-to-string (elt cipher_with_loop count3)))
      (setq count3 (1+ count3))
   )
)

(caesar_cipher)
#+END_SRC

#+RESULTS:
#+begin_example

"j"

"g"

"n"

"n"

"q"

"b"
#+end_example
** Vigenere Cipher

#+BEGIN_SRC elisp :results output 
(defun vigenere_cipher()
   "An elisp implementation of the Vigenere cipher"
   
   ; Let's keep the key and the plaintext at the top again
   (setq plaintext "hello")
   (setq key "cat")

   ; Make the plaintext and key lowercase
   (setq plaintext (downcase plaintext))
   (setq key (downcase key))

   ; Find the lengths of the key and plaintext message
   (setq msg_length (length (symbol-value 'plaintext)))
   (setq key_length (length (symbol-value 'key)))

   ; Make a list of the shift values we need
   (setq count 0)
   (setq key_nums '())
   (while (< count key_length)
      (setq key_nums (cons (% (elt key count) 96) key_nums))
      (setq count (1+ count))
   )
   (setq key_nums (reverse key_nums))

   ; Encrypt using the Vigenere algorithm
   ;    It's pretty straightforward, we just need some clever math
   (setq count1 0)
   (setq ciphertext '())
   (while (< count1 msg_length)
      (setq ciphertext (cons (% (+ (elt key_nums (% count1 key_length)) (elt plaintext count1)) 122) ciphertext))
      (setq count1 (1+ count1))
   )
   (setq ciphertext (reverse ciphertext)) ; To reverse the reversing caused by the cons function

   ; Let's take care of the wrap-around values that might be less than 97 (aka 'a' in ascii)
   (setq count2 0)
   (setq cipher_with_wrap '())
   (while (< count2 (length (symbol-value 'ciphertext)))
      (if (< (elt ciphertext count2) 97)
         (setq cipher_with_wrap (cons (+ 96 (elt ciphertext count2)) cipher_with_wrap))
       (setq cipher_with_wrap (cons (elt ciphertext count2) cipher_with_wrap))
      )
      (setq count2 (1+ count2))
   )
   (setq cipher_with_wrap (reverse cipher_with_wrap))


   ; All that's left is to print out the cipher values!
   (setq count3 0)
   (while (< count3 (length (symbol-value 'cipher_with_wrap)))
      (print (char-to-string (elt cipher_with_wrap count3)))
      (setq count3 (1+ count3))
   )
)

(vigenere_cipher)
#+END_SRC

#+RESULTS:
#+begin_example

"k"

"f"

"f"

"o"

"p"
#+end_example
